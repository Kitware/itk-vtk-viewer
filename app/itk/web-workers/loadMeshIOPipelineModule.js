var __await=this&&this.__await||function(e){return this instanceof __await?(this.v=e,this):new __await(e)},__asyncGenerator=this&&this.__asyncGenerator||function(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,o=t.apply(e,n||[]),r=[];return i={},a("next"),a("throw"),a("return"),i[Symbol.asyncIterator]=function(){return this},i;function a(e){o[e]&&(i[e]=function(n){return new Promise((function(t,i){r.push([e,n,t,i])>1||s(e,n)}))})}function s(e,n){try{(t=o[e](n)).value instanceof __await?Promise.resolve(t.value.v).then(l,u):c(r[0][2],t)}catch(e){c(r[0][3],e)}var t}function l(e){s("next",e)}function u(e){s("throw",e)}function c(e,n){e(n),r.shift(),r.length&&s(r[0][0],r[0][1])}},__asyncValues=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,t=e[Symbol.asyncIterator];return t?t.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),n={},i("next"),i("throw"),i("return"),n[Symbol.asyncIterator]=function(){return this},n);function i(t){n[t]=e[t]&&function(n){return new Promise((function(i,o){!function(e,n,t,i){Promise.resolve(i).then((function(n){e({value:n,done:t})}),n)}(i,o,(n=e[t](n)).done,n.value)}))}}};import loadPipelineModule from"./loadPipelineModule.js";import mimeToIO from"../io/internal/MimeToMeshIO.js";import extensionToIO from"../io/internal/extensionToMeshIO.js";import getFileExtension from"../io/getFileExtension.js";import MeshIOIndex from"../io/internal/MeshIOIndex.js";import runPipelineEmscripten from"../pipeline/internal/runPipelineEmscripten.js";function availableIOModules(e){return __asyncGenerator(this,arguments,(function*(){for(let n=0;n<MeshIOIndex.length;n++){const t=MeshIOIndex[n]+"ReadMesh",i=yield __await(loadPipelineModule(t,e.config.meshIOUrl));yield yield __await(i)}}))}async function loadMeshIOPipelineModule(e,n){var t,i;if(e.mimeType&&mimeToIO.has(e.mimeType)){const t=mimeToIO.get(e.mimeType)+n;return await loadPipelineModule(t,e.config.meshIOUrl)}const o=getFileExtension(e.fileName);if(extensionToIO.has(o)){const t=extensionToIO.get(o)+n;return await loadPipelineModule(t,e.config.meshIOUrl)}for(let n=0;n<MeshIOIndex.length;++n){let n=0;try{for(var r,a=(t=void 0,__asyncValues(availableIOModules(e)));!(r=await a.next()).done;){const t=r.value,{returnValue:i,outputs:o}=await runPipelineEmscripten(t,e.args,e.outputs,e.inputs);if(0===i)return t;n++}}catch(e){t={error:e}}finally{try{r&&!r.done&&(i=a.return)&&await i.call(a)}finally{if(t)throw t.error}}}throw Error(`Could not find IO for: ${e.fileName}`)}export default loadMeshIOPipelineModule;