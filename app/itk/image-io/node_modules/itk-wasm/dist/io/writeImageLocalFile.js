import path from"path";import mime from"mime-types";import mimeToIO from"./internal/MimeToImageIO.js";import getFileExtension from"./getFileExtension.js";import extensionToIO from"./extensionToImageIO.js";import ImageIOIndex from"./internal/ImageIOIndex.js";import loadEmscriptenModule from"../core/internal/loadEmscriptenModuleNode.js";import runPipelineEmscripten from"../pipeline/internal/runPipelineEmscripten.js";import findLocalImageIOPath from"./internal/findLocalImageIOPath.js";import InterfaceTypes from"../core/InterfaceTypes.js";async function writeImageLocalFile(e,n,i=!1){if("boolean"==typeof e)throw new Error("useCompression is now the last argument in itk-wasm");const o=findLocalImageIOPath(),t=path.resolve(n),r=mime.lookup(t),m=getFileExtension(t),a=["0",t,"--memory-io","--quiet"];i&&a.push("--use-compression");const s=[],l=[{type:InterfaceTypes.Image,data:e}];let p=null;if(!1!==r&&mimeToIO.has(r))p=mimeToIO.get(r);else if(extensionToIO.has(m))p=extensionToIO.get(m);else for(let e=0;e<ImageIOIndex.length;++e){const n=path.join(o,ImageIOIndex[e]+"WriteImage.js"),i=await loadEmscriptenModule(n),r=i.mountContainingDir(t),{returnValue:m}=runPipelineEmscripten(i,a,s,l);if(i.unmountContainingDir(r),0===m)return null}if(null===p)throw Error("Could not find IO for: "+t);const I=path.join(o,p+"WriteImage.js"),u=await loadEmscriptenModule(I),f=u.mountContainingDir(t);return runPipelineEmscripten(u,a,s,l),u.unmountContainingDir(f),null}export default writeImageLocalFile;