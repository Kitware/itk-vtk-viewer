import createWebWorkerPromise from"../core/internal/createWebWorkerPromise.js";import config from"../itkConfig.js";import InterfaceTypes from"../core/InterfaceTypes.js";import meshTransferables from"../core/internal/meshTransferables.js";async function writeMeshArrayBuffer(e,r,i,o,s){if("useCompression"in r||"binaryFileType"in r)throw new Error("options are now in the last argument position in itk-wasm");let t=e;const{webworkerPromise:a,worker:n}=await createWebWorkerPromise(t);t=n;const p=`./${i}`,f=["0",p,"--memory-io","--quiet"];!0===(null==s?void 0:s.useCompression)&&f.push("--use-compression"),!0===(null==s?void 0:s.binaryFileType)&&f.push("--binary-file-type");const m=[{data:{path:p},type:InterfaceTypes.BinaryFile}],u=[{type:InterfaceTypes.Mesh,data:r}],c=meshTransferables(r);return{arrayBuffer:(await a.postMessage({operation:"writeMesh",config,mimeType:o,fileName:i,pipelinePath:"WriteMesh",args:f,outputs:m,inputs:u},c)).outputs[0].data.data.buffer,webWorker:t}}export default writeMeshArrayBuffer;