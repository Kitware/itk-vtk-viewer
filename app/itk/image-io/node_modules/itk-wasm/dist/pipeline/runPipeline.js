import createWebWorkerPromise from"../core/internal/createWebWorkerPromise.js";import loadEmscriptenModuleMainThread from"../core/internal/loadEmscriptenModuleMainThread.js";import config from"../itkConfig.js";import IOTypes from"../core/IOTypes.js";import InterfaceTypes from"../core/InterfaceTypes.js";import runPipelineEmscripten from"./internal/runPipelineEmscripten.js";import getTransferable from"../core/getTransferable.js";const pipelineToModule=new Map;async function loadPipelineModule(e){let t=e,n=e;if("string"!=typeof e&&(t=new URL(e.href),n=t.href),pipelineToModule.has(n))return pipelineToModule.get(n);{const t=await loadEmscriptenModuleMainThread(e,config.pipelinesUrl);return pipelineToModule.set(n,t),t}}async function runPipeline(e,t,n,r,a){if(!1===e){const e=await loadPipelineModule(t.toString());return runPipelineEmscripten(e,n,r,a)}let l=e;const{webworkerPromise:i,worker:o}=await createWebWorkerPromise(l);l=o;const s=[];null!=a&&a.length>0&&a.forEach((function(e){if(e.type===InterfaceTypes.BinaryStream){const t=e.data.data,n=getTransferable(t);null!=n&&s.push(n)}else if(e.type===InterfaceTypes.BinaryFile){const t=e.data.data,n=getTransferable(t);null!=n&&s.push(n)}else if(e.type===InterfaceTypes.Image){const t=e.data;if(null===t.data)throw Error("image data cannot be null");let n=getTransferable(t.data);null!=n&&s.push(n),n=getTransferable(t.direction),null!=n&&s.push(n)}else if(e.type===IOTypes.Binary){const t=getTransferable(e.data);null!=t&&s.push(t)}else if(e.type===IOTypes.Image){const t=e.data;if(null===t.data)throw Error("image data cannot be null");let n=getTransferable(t.data);null!=n&&s.push(n),n=getTransferable(t.direction),null!=n&&s.push(n)}else if(e.type===IOTypes.Mesh){const t=e.data;if(null!=t.points){const e=getTransferable(t.points);null!=e&&s.push(e)}if(null!=t.pointData){const e=getTransferable(t.pointData);null!=e&&s.push(e)}if(null!=t.cells){const e=getTransferable(t.cells);null!=e&&s.push(e)}if(null!=t.cellData){const e=getTransferable(t.cellData);null!=e&&s.push(e)}}}));const p=await i.postMessage({operation:"runPipeline",config,pipelinePath:t.toString(),args:n,outputs:r,inputs:a},s);return{returnValue:p.returnValue,stdout:p.stdout,stderr:p.stderr,outputs:p.outputs,webWorker:l}}export default runPipeline;