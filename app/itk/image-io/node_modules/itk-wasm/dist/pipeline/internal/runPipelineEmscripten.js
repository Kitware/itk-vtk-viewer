import InterfaceTypes from"../../core/InterfaceTypes.js";import IOTypes from"../../core/IOTypes.js";import bufferToTypedArray from"../../core/bufferToTypedArray.js";import FloatTypes from"../../core/FloatTypes.js";import IntTypes from"../../core/IntTypes.js";const haveSharedArrayBuffer="function"==typeof globalThis.SharedArrayBuffer,encoder=new TextEncoder,decoder=new TextDecoder("utf-8");function readFileSharedArray(e,t){const a=e.fs_open(t,"r"),r=e.fs_stat(t).size;let n=null;n=haveSharedArrayBuffer?new SharedArrayBuffer(r):new ArrayBuffer(r);const i=new Uint8Array(n);return e.fs_read(a,i,0,r,0),e.fs_close(a),i}function memoryUint8SharedArray(e,t,a){let r=null;r=haveSharedArrayBuffer?new SharedArrayBuffer(a):new ArrayBuffer(a);const n=new Uint8Array(r),i=new Uint8Array(e.HEAPU8.buffer,t,a);return n.set(i),n}function setPipelineModuleInputArray(e,t,a,r){let n=0;return null!==t&&(n=e.ccall("itk_wasm_input_array_alloc","number",["number","number","number","number"],[0,a,r,t.buffer.byteLength]),e.HEAPU8.set(new Uint8Array(t.buffer),n)),n}function setPipelineModuleInputJSON(e,t,a){const r=JSON.stringify(t),n=e.ccall("itk_wasm_input_json_alloc","number",["number","number","number"],[0,a,r.length]);e.writeAsciiToMemory(r,n,!1)}function getPipelineModuleOutputArray(e,t,a,r){const n=e.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,t,a]),i=e.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,t,a]),p=memoryUint8SharedArray(e,n,i);return bufferToTypedArray(r,p.buffer)}function getPipelineModuleOutputJSON(e,t){const a=e.ccall("itk_wasm_output_json_address","number",["number","number"],[0,t]),r=e.AsciiToString(a);return JSON.parse(r)}function runPipelineEmscripten(e,t,a,r){null!=r&&r.length>0&&r.forEach((function(t,a){switch(t.type){case InterfaceTypes.TextStream:{const r=encoder.encode(t.data.data),n=setPipelineModuleInputArray(e,r,a,0),i={size:r.buffer.byteLength,data:`data:application/vnd.itk.address,0:${n}`};setPipelineModuleInputJSON(e,i,a);break}case InterfaceTypes.BinaryStream:{const r=t.data.data,n=setPipelineModuleInputArray(e,r,a,0),i={size:r.buffer.byteLength,data:`data:application/vnd.itk.address,0:${n}`};setPipelineModuleInputJSON(e,i,a);break}case InterfaceTypes.TextFile:case InterfaceTypes.BinaryFile:e.fs_writeFile(t.data.path,t.data.data);break;case InterfaceTypes.Image:{const r=t.data,n=setPipelineModuleInputArray(e,r.data,a,0),i=setPipelineModuleInputArray(e,r.direction,a,1),p={imageType:r.imageType,name:r.name,origin:r.origin,spacing:r.spacing,direction:`data:application/vnd.itk.address,0:${i}`,size:r.size,data:`data:application/vnd.itk.address,0:${n}`};setPipelineModuleInputJSON(e,p,a);break}case InterfaceTypes.Mesh:{const r=t.data,n=setPipelineModuleInputArray(e,r.points,a,0),i=setPipelineModuleInputArray(e,r.cells,a,1),p=setPipelineModuleInputArray(e,r.pointData,a,2),l=setPipelineModuleInputArray(e,r.pointData,a,3),o={meshType:r.meshType,name:r.name,numberOfPoints:r.numberOfPoints,points:`data:application/vnd.itk.address,0:${n}`,numberOfCells:r.numberOfCells,cells:`data:application/vnd.itk.address,0:${i}`,cellBufferSize:r.cellBufferSize,numberOfPointPixels:r.numberOfPointPixels,pointData:`data:application/vnd.itk.address,0:${p}`,numberOfCellPixels:r.numberOfCellPixels,cellData:`data:application/vnd.itk.address,0:${l}`};setPipelineModuleInputJSON(e,o,a);break}case InterfaceTypes.PolyData:{const r=t.data,n=setPipelineModuleInputArray(e,r.points,a,0),i=setPipelineModuleInputArray(e,r.vertices,a,1),p=setPipelineModuleInputArray(e,r.lines,a,2),l=setPipelineModuleInputArray(e,r.polygons,a,3),o=setPipelineModuleInputArray(e,r.triangleStrips,a,4),s=setPipelineModuleInputArray(e,r.pointData,a,5),u=setPipelineModuleInputArray(e,r.pointData,a,6),d={polyDataType:r.polyDataType,name:r.name,numberOfPoints:r.numberOfPoints,points:`data:application/vnd.itk.address,0:${n}`,verticesBufferSize:r.verticesBufferSize,vertices:`data:application/vnd.itk.address,0:${i}`,linesBufferSize:r.linesBufferSize,lines:`data:application/vnd.itk.address,0:${p}`,polygonsBufferSize:r.polygonsBufferSize,polygons:`data:application/vnd.itk.address,0:${l}`,triangleStripsBufferSize:r.triangleStripsBufferSize,triangleStrips:`data:application/vnd.itk.address,0:${o}`,numberOfPointPixels:r.numberOfPointPixels,pointData:`data:application/vnd.itk.address,0:${s}`,numberOfCellPixels:r.numberOfCellPixels,cellData:`data:application/vnd.itk.address,0:${u}`};setPipelineModuleInputJSON(e,d,a);break}case IOTypes.Text:case IOTypes.Binary:e.fs_writeFile(t.path,t.data);break;case IOTypes.Image:{const a=t.data,r={imageType:a.imageType,name:a.name,origin:a.origin,spacing:a.spacing,direction:"data:application/vnd.itk.path,data/direction.raw",size:a.size,data:"data:application/vnd.itk.path,data/data.raw"};if(e.fs_mkdirs(`${t.path}/data`),e.fs_writeFile(`${t.path}/index.json`,JSON.stringify(r)),null===a.data)throw Error("image.data is null");e.fs_writeFile(`${t.path}/data/data.raw`,new Uint8Array(a.data.buffer)),e.fs_writeFile(`${t.path}/data/direction.raw`,new Uint8Array(a.direction.buffer));break}case IOTypes.Mesh:{const a=t.data,r={meshType:a.meshType,name:a.name,numberOfPoints:a.numberOfPoints,points:"data:application/vnd.itk.path,data/points.raw",numberOfPointPixels:a.numberOfPointPixels,pointData:"data:application/vnd.itk.path,data/pointData.raw",numberOfCells:a.numberOfCells,cells:"data:application/vnd.itk.path,data/cells.raw",numberOfCellPixels:a.numberOfCellPixels,cellData:"data:application/vnd.itk.path,data/cellData.raw",cellBufferSize:a.cellBufferSize};if(e.fs_mkdirs(`${t.path}/data`),e.fs_writeFile(`${t.path}/index.json`,JSON.stringify(r)),r.numberOfPoints>0){if(null===a.points)throw Error("mesh.points is null");e.fs_writeFile(`${t.path}/data/points.raw`,new Uint8Array(a.points.buffer))}if(r.numberOfPointPixels>0){if(null===a.pointData)throw Error("mesh.pointData is null");e.fs_writeFile(`${t.path}/data/pointData.raw`,new Uint8Array(a.pointData.buffer))}if(r.numberOfCells>0){if(null===a.cells)throw Error("mesh.cells is null");e.fs_writeFile(`${t.path}/data/cells.raw`,new Uint8Array(a.cells.buffer))}if(r.numberOfCellPixels>0){if(null===a.cellData)throw Error("mesh.cellData is null");e.fs_writeFile(`${t.path}/data/cellData.raw`,new Uint8Array(a.cellData.buffer))}break}default:throw Error("Unsupported input InterfaceType")}})),e.resetModuleStdout(),e.resetModuleStderr();let n=0;try{n=e.callMain(t)}catch(t){throw"number"==typeof t&&(console.log("Exception while running pipeline:"),console.log("stdout:",e.getModuleStdout()),console.error("stderr:",e.getModuleStderr()),void 0!==e.getExceptionMessage?console.error("exception:",e.getExceptionMessage(t)):console.error("Build module in Debug mode for exception message information.")),t}const i=e.getModuleStdout(),p=e.getModuleStderr(),l=[];return null!=a&&a.length>0&&0===n&&a.forEach((function(t,a){let r=null;switch(t.type){case InterfaceTypes.TextStream:{const t=e.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,a,0]),n=e.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,a,0]),i=new Uint8Array(e.HEAPU8.buffer,t,n);r={data:decoder.decode(i)};break}case InterfaceTypes.BinaryStream:{const t=e.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,a,0]),n=e.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,a,0]);r={data:memoryUint8SharedArray(e,t,n)};break}case InterfaceTypes.TextFile:r={path:t.data.path,data:e.fs_readFile(t.data.path,{encoding:"utf8"})};break;case InterfaceTypes.BinaryFile:r={path:t.data.path,data:readFileSharedArray(e,t.data.path)};break;case InterfaceTypes.Image:{const t=getPipelineModuleOutputJSON(e,a);t.data=getPipelineModuleOutputArray(e,a,0,t.imageType.componentType),t.direction=getPipelineModuleOutputArray(e,a,1,FloatTypes.Float64),r=t;break}case InterfaceTypes.Mesh:{const t=getPipelineModuleOutputJSON(e,a);t.numberOfPoints>0?t.points=getPipelineModuleOutputArray(e,a,0,t.meshType.pointComponentType):t.points=bufferToTypedArray(t.meshType.pointComponentType,new ArrayBuffer(0)),t.numberOfCells>0?t.cells=getPipelineModuleOutputArray(e,a,1,t.meshType.cellComponentType):t.cells=bufferToTypedArray(t.meshType.cellComponentType,new ArrayBuffer(0)),t.numberOfPointPixels>0?t.pointData=getPipelineModuleOutputArray(e,a,2,t.meshType.pointPixelComponentType):t.pointData=bufferToTypedArray(t.meshType.pointPixelComponentType,new ArrayBuffer(0)),t.numberOfCellPixels>0?t.cellData=getPipelineModuleOutputArray(e,a,3,t.meshType.cellPixelComponentType):t.cellData=bufferToTypedArray(t.meshType.cellPixelComponentType,new ArrayBuffer(0)),r=t;break}case InterfaceTypes.PolyData:{const t=getPipelineModuleOutputJSON(e,a);t.numberOfPoints>0?t.points=getPipelineModuleOutputArray(e,a,0,FloatTypes.Float32):t.points=new Float32Array,t.verticesBufferSize>0?t.vertices=getPipelineModuleOutputArray(e,a,1,IntTypes.UInt32):t.vertices=new Uint32Array,t.linesBufferSize>0?t.lines=getPipelineModuleOutputArray(e,a,2,IntTypes.UInt32):t.lines=new Uint32Array,t.polygonsBufferSize>0?t.polygons=getPipelineModuleOutputArray(e,a,3,IntTypes.UInt32):t.polygons=new Uint32Array,t.triangleStripsBufferSize>0?t.triangleStrips=getPipelineModuleOutputArray(e,a,4,IntTypes.UInt32):t.triangleStrips=new Uint32Array,t.numberOfPointPixels>0?t.pointData=getPipelineModuleOutputArray(e,a,5,t.polyDataType.pointPixelComponentType):t.pointData=bufferToTypedArray(t.polyDataType.pointPixelComponentType,new ArrayBuffer(0)),t.numberOfCellPixels>0?t.cellData=getPipelineModuleOutputArray(e,a,6,t.polyDataType.cellPixelComponentType):t.cellData=bufferToTypedArray(t.polyDataType.cellPixelComponentType,new ArrayBuffer(0)),r=t;break}case IOTypes.Text:if(void 0===t.path)throw new Error("output.path not defined");r=e.fs_readFile(t.path,{encoding:"utf8"});break;case IOTypes.Binary:if(void 0===t.path)throw new Error("output.path not defined");r=readFileSharedArray(e,t.path);break;case IOTypes.Image:{if(void 0===t.path)throw new Error("output.path not defined");const a=e.fs_readFile(`${t.path}/index.json`,{encoding:"utf8"}),n=JSON.parse(a),i=readFileSharedArray(e,`${t.path}/data/data.raw`);n.data=bufferToTypedArray(n.imageType.componentType,i.buffer);const p=readFileSharedArray(e,`${t.path}/data/direction.raw`);n.direction=bufferToTypedArray(FloatTypes.Float64,p.buffer),r=n;break}case IOTypes.Mesh:{if(void 0===t.path)throw new Error("output.path not defined");const a=e.fs_readFile(`${t.path}/index.json`,{encoding:"utf8"}),n=JSON.parse(a);if(n.numberOfPoints>0){const a=readFileSharedArray(e,`${t.path}/data/points.raw`);n.points=bufferToTypedArray(n.meshType.pointComponentType,a.buffer)}else n.points=bufferToTypedArray(n.meshType.pointComponentType,new ArrayBuffer(0));if(n.numberOfPointPixels>0){const a=readFileSharedArray(e,`${t.path}/data/pointData.raw`);n.pointData=bufferToTypedArray(n.meshType.pointPixelComponentType,a.buffer)}else n.pointData=bufferToTypedArray(n.meshType.pointPixelComponentType,new ArrayBuffer(0));if(n.numberOfCells>0){const a=readFileSharedArray(e,`${t.path}/data/cells.raw`);n.cells=bufferToTypedArray(n.meshType.cellComponentType,a.buffer)}else n.cells=bufferToTypedArray(n.meshType.cellComponentType,new ArrayBuffer(0));if(n.numberOfCellPixels>0){const a=readFileSharedArray(e,`${t.path}/data/cellData.raw`);n.cellData=bufferToTypedArray(n.meshType.cellPixelComponentType,a.buffer)}else n.cellData=bufferToTypedArray(n.meshType.cellPixelComponentType,new ArrayBuffer(0));r=n;break}default:throw Error("Unsupported output InterfaceType")}const n={type:t.type,data:r};l.push(n)})),{returnValue:n,stdout:i,stderr:p,outputs:l}}export default runPipelineEmscripten;