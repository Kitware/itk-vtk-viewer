import path from"path";import mime from"mime-types";import mimeToIO from"./internal/MimeToImageIO.js";import getFileExtension from"./getFileExtension.js";import extensionToIO from"./extensionToImageIO.js";import ImageIOIndex from"./internal/ImageIOIndex.js";import loadEmscriptenModule from"../core/internal/loadEmscriptenModuleNode.js";import runPipelineEmscripten from"../pipeline/internal/runPipelineEmscripten.js";import findLocalImageIOPath from"./internal/findLocalImageIOPath.js";import InterfaceTypes from"../core/InterfaceTypes.js";async function readImageLocalFile(e){const n=findLocalImageIOPath(),i=path.resolve(e),o=mime.lookup(i),t=getFileExtension(i),r=[i,"0","--memory-io","--quiet"],m=[{type:InterfaceTypes.Image}],a=[];let l=null;if(!1!==o&&mimeToIO.has(o))l=mimeToIO.get(o);else if(extensionToIO.has(t))l=extensionToIO.get(t);else for(let e=0;e<ImageIOIndex.length;++e){const o=path.join(n,ImageIOIndex[e]+"ReadImage.js"),t=await loadEmscriptenModule(o),l=t.mountContainingDir(i),{returnValue:s,outputs:p}=runPipelineEmscripten(t,r,m,a);if(t.unmountContainingDir(l),0===s)return p[0].data}if(null===l)throw Error("Could not find IO for: "+i);const s=path.join(n,l+"ReadImage.js"),p=await loadEmscriptenModule(s),I=p.mountContainingDir(i),{outputs:u}=runPipelineEmscripten(p,r,m,a);return p.unmountContainingDir(I),u[0].data}export default readImageLocalFile;