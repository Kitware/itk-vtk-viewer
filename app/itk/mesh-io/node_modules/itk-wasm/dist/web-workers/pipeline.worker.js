import registerWebworker from"webworker-promise/lib/register.js";import loadPipelineModule from"./loadPipelineModule.js";import loadImageIOPipelineModule from"./loadImageIOPipelineModule.js";import loadMeshIOPipelineModule from"./loadMeshIOPipelineModule.js";import runPipeline from"./runPipeline.js";registerWebworker((async function(e){let i=null;if("runPipeline"===e.operation)i=await loadPipelineModule(e.pipelinePath,e.config.pipelinesUrl);else if("readImage"===e.operation)i=await loadImageIOPipelineModule(e,"ReadImage");else if("writeImage"===e.operation)i=await loadImageIOPipelineModule(e,"WriteImage");else if("readMesh"===e.operation)i=await loadMeshIOPipelineModule(e,"ReadMesh");else if("writeMesh"===e.operation)i=await loadMeshIOPipelineModule(e,"WriteMesh");else if("meshToPolyData"===e.operation)i=await loadPipelineModule("MeshToPolyData",e.config.meshIOUrl);else if("polyDataToMesh"===e.operation)i=await loadPipelineModule("PolyDataToMesh",e.config.meshIOUrl);else if("readDICOMImageSeries"===e.operation)i=await loadPipelineModule("ReadImageDICOMFileSeries",e.config.imageIOUrl);else{if("readDICOMTags"!==e.operation)throw new Error("Unknown worker operation");i=await loadPipelineModule("ReadDICOMTags",e.config.imageIOUrl)}return runPipeline(i,e.args,e.outputs,e.inputs)}));