const{InvalidArgumentError}=require("./error.js");class Argument{constructor(e,r){switch(this.description=r||"",this.variadic=!1,this.parseArg=void 0,this.defaultValue=void 0,this.defaultValueDescription=void 0,this.argChoices=void 0,e[0]){case"<":this.required=!0,this._name=e.slice(1,-1);break;case"[":this.required=!1,this._name=e.slice(1,-1);break;default:this.required=!0,this._name=e}this._name.length>3&&"..."===this._name.slice(-3)&&(this.variadic=!0,this._name=this._name.slice(0,-3))}name(){return this._name}_concatValue(e,r){return r!==this.defaultValue&&Array.isArray(r)?r.concat(e):[e]}default(e,r){return this.defaultValue=e,this.defaultValueDescription=r,this}argParser(e){return this.parseArg=e,this}choices(e){return this.argChoices=e,this.parseArg=(r,i)=>{if(!e.includes(r))throw new InvalidArgumentError(`Allowed choices are ${e.join(", ")}.`);return this.variadic?this._concatValue(r,i):r},this}argRequired(){return this.required=!0,this}argOptional(){return this.required=!1,this}}function humanReadableArgName(e){const r=e.name()+(!0===e.variadic?"...":"");return e.required?"<"+r+">":"["+r+"]"}exports.Argument=Argument,exports.humanReadableArgName=humanReadableArgName;