import axios from"axios";import WebworkerPromise from"webworker-promise";import config from"../../itkConfig.js";async function createWebWorkerPromise(e){if(null!=e){const r=new WebworkerPromise(e);return await Promise.resolve({webworkerPromise:r,worker:e})}let r=null;const o=config.webWorkersUrl;if(void 0!==o){console.warn("itkConfig webWorkersUrl is deprecated. Please use pipelineWorkerUrl with the full path to the pipeline worker.");const e="min-",i=o;if(i.startsWith("http")){const o=await axios.get(`${i}/${e}bundles/pipeline.worker.js`,{responseType:"blob"});r=new Worker(URL.createObjectURL(o.data))}else r=new Worker(`${i}/${e}bundles/pipeline.worker.js`)}else if(null===config.pipelineWorkerUrl)r=new Worker(new URL("../../web-workers/pipeline.worker.js",import.meta.url));else{const e=config.pipelineWorkerUrl;if(e.startsWith("http")){const o=await axios.get(e,{responseType:"blob"});r=new Worker(URL.createObjectURL(o.data))}else r=new Worker(e)}return{webworkerPromise:new WebworkerPromise(r),worker:r}}export default createWebWorkerPromise;