var _a;import createWebWorkerPromise from"../core/internal/createWebWorkerPromise.js";import WorkerPool from"../core/WorkerPool.js";import stackImages from"../core/stackImages.js";import InterfaceTypes from"../core/InterfaceTypes.js";import config from"../itkConfig.js";const workerFunction=async(e,r,o=!1)=>{let a=e;const{webworkerPromise:s,worker:t}=await createWebWorkerPromise(a);a=t;const i=["--memory-io","--output-image","0","--input-images"];r.forEach((e=>{i.push(`./${e.path}`)})),o&&i.push("--single-sorted-series");const n=[{type:InterfaceTypes.Image}],m=r.map((e=>({type:InterfaceTypes.BinaryFile,data:e}))),c=r.map((e=>e.data.buffer)),p={operation:"readDICOMImageSeries",config,fileDescriptions:r,singleSortedSeries:o,pipelinePath:"ReadDICOMImageFileSeries",args:i,outputs:n,inputs:m};return{image:(await s.postMessage(p,c)).outputs[0].data,webWorker:a}},numberOfWorkers="number"==typeof(null===(_a=globalThis.navigator)||void 0===_a?void 0:_a.hardwareConcurrency)?globalThis.navigator.hardwareConcurrency:4,workerPool=new WorkerPool(numberOfWorkers,workerFunction),seriesBlockSize=8,readImageDICOMArrayBufferSeries=async(e,r=!1)=>{const o=e.map(((e,r)=>({path:`${r}.dcm`,data:new Uint8Array(e)})));if(r){const e=[];for(let a=0;a<o.length;a+=8){const s=o.slice(a,a+8);e.push([s,r])}const a=(await workerPool.runTasks(e).promise).map((e=>e.image));return{image:stackImages(a),webWorkerPool:workerPool}}{const e=[[o,r]];return{image:(await workerPool.runTasks(e).promise)[0].image,webWorkerPool:workerPool}}};export default readImageDICOMArrayBufferSeries;