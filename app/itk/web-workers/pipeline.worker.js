import registerWebworker from"webworker-promise/lib/register.js";import loadPipelineModule from"./loadPipelineModule.js";import loadImageIOPipelineModule from"./loadImageIOPipelineModule.js";import loadMeshIOPipelineModule from"./loadMeshIOPipelineModule.js";import runPipeline from"./runPipeline.js";registerWebworker((async function(e){let i=null;if("runPipeline"===e.operation){const o=void 0===e.config[e.pipelineBaseUrl]?e.pipelineBaseUrl:e.config[e.pipelineBaseUrl];i=await loadPipelineModule(e.pipelinePath,o)}else if("readImage"===e.operation)i=await loadImageIOPipelineModule(e,"-read-image");else if("writeImage"===e.operation)i=await loadImageIOPipelineModule(e,"-write-image");else if("readMesh"===e.operation)i=await loadMeshIOPipelineModule(e,"-read-mesh");else if("writeMesh"===e.operation)i=await loadMeshIOPipelineModule(e,"-write-mesh");else if("meshToPolyData"===e.operation)i=await loadPipelineModule("mesh-to-polydata",e.config.meshIOUrl);else if("polyDataToMesh"===e.operation)i=await loadPipelineModule("polydata-to-mesh",e.config.meshIOUrl);else if("readDICOMImageSeries"===e.operation)i=await loadPipelineModule("read-image-dicom-file-series",e.config.imageIOUrl);else{if("readDICOMTags"!==e.operation)throw new Error("Unknown worker operation");i=await loadPipelineModule("read-dicom-tags",e.config.imageIOUrl)}return runPipeline(i,e.args,e.outputs,e.inputs)}));