var _a;import stackImages from"../core/stackImages.js";import readImageArrayBuffer from"./readImageArrayBuffer.js";import WorkerPool from"../core/WorkerPool.js";import{readAsArrayBuffer}from"promise-file-reader";const numberOfWorkers="number"==typeof(null===(_a=globalThis.navigator)||void 0===_a?void 0:_a.hardwareConcurrency)?globalThis.navigator.hardwareConcurrency:6,workerPool=new WorkerPool(numberOfWorkers,readImageArrayBuffer);async function readImageFileSeries(r,e=1,a=0,o=!1){const n=Array.from(r,(async function(r){return await readAsArrayBuffer(r).then((function(e){return{name:r.name,type:r.type,data:e}}))})),i=await Promise.all(n);o||i.sort(((r,e)=>r.name<e.name?-1:r.name>e.name?1:0));const t=[];for(let r=0;r<i.length;r++)t.push([i[r].data,i[r].name]);const s=(await workerPool.runTasks(t).promise).map((r=>{const o=r.image;return o.imageType.dimension=3,o.size.push(1),o.spacing.push(e),o.origin.push(a),o.direction=new Float64Array(9),o.direction.fill(0),o.direction[0]=1,o.direction[4]=1,o.direction[8]=1,o}));return{image:stackImages(s),webWorkerPool:workerPool}}export default readImageFileSeries;