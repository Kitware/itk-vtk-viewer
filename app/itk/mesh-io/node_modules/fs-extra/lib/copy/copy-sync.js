"use strict";const fs=require("graceful-fs"),path=require("path"),mkdirsSync=require("../mkdirs").mkdirsSync,utimesMillisSync=require("../util/utimes").utimesMillisSync,stat=require("../util/stat");function copySync(e,t,r){"function"==typeof r&&(r={filter:r}),(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0002");const{srcStat:n,destStat:i}=stat.checkPathsSync(e,t,"copy",r);return stat.checkParentPathsSync(e,n,t,"copy"),handleFilterAndCopy(i,e,t,r)}function handleFilterAndCopy(e,t,r,n){if(n.filter&&!n.filter(t,r))return;const i=path.dirname(r);return fs.existsSync(i)||mkdirsSync(i),getStats(e,t,r,n)}function startCopy(e,t,r,n){if(!n.filter||n.filter(t,r))return getStats(e,t,r,n)}function getStats(e,t,r,n){const i=(n.dereference?fs.statSync:fs.lstatSync)(t);if(i.isDirectory())return onDir(i,e,t,r,n);if(i.isFile()||i.isCharacterDevice()||i.isBlockDevice())return onFile(i,e,t,r,n);if(i.isSymbolicLink())return onLink(e,t,r,n);if(i.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(i.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}function onFile(e,t,r,n,i){return t?mayCopyFile(e,r,n,i):copyFile(e,r,n,i)}function mayCopyFile(e,t,r,n){if(n.overwrite)return fs.unlinkSync(r),copyFile(e,t,r,n);if(n.errorOnExist)throw new Error(`'${r}' already exists`)}function copyFile(e,t,r,n){return fs.copyFileSync(t,r),n.preserveTimestamps&&handleTimestamps(e.mode,t,r),setDestMode(r,e.mode)}function handleTimestamps(e,t,r){return fileIsNotWritable(e)&&makeFileWritable(r,e),setDestTimestamps(t,r)}function fileIsNotWritable(e){return 0==(128&e)}function makeFileWritable(e,t){return setDestMode(e,128|t)}function setDestMode(e,t){return fs.chmodSync(e,t)}function setDestTimestamps(e,t){const r=fs.statSync(e);return utimesMillisSync(t,r.atime,r.mtime)}function onDir(e,t,r,n,i){return t?copyDir(r,n,i):mkDirAndCopy(e.mode,r,n,i)}function mkDirAndCopy(e,t,r,n){return fs.mkdirSync(r),copyDir(t,r,n),setDestMode(r,e)}function copyDir(e,t,r){fs.readdirSync(e).forEach((n=>copyDirItem(n,e,t,r)))}function copyDirItem(e,t,r,n){const i=path.join(t,e),s=path.join(r,e),{destStat:o}=stat.checkPathsSync(i,s,"copy",n);return startCopy(o,i,s,n)}function onLink(e,t,r,n){let i=fs.readlinkSync(t);if(n.dereference&&(i=path.resolve(process.cwd(),i)),e){let e;try{e=fs.readlinkSync(r)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return fs.symlinkSync(i,r);throw e}if(n.dereference&&(e=path.resolve(process.cwd(),e)),stat.isSrcSubdir(i,e))throw new Error(`Cannot copy '${i}' to a subdirectory of itself, '${e}'.`);if(fs.statSync(r).isDirectory()&&stat.isSrcSubdir(e,i))throw new Error(`Cannot overwrite '${e}' with '${i}'.`);return copyLink(i,r)}return fs.symlinkSync(i,r)}function copyLink(e,t){return fs.unlinkSync(t),fs.symlinkSync(e,t)}module.exports=copySync;