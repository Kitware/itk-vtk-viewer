const{InvalidArgumentError}=require("./error.js");class Option{constructor(t,i){this.flags=t,this.description=i||"",this.required=t.includes("<"),this.optional=t.includes("["),this.variadic=/\w\.\.\.[>\]]$/.test(t),this.mandatory=!1;const s=splitOptionFlags(t);this.short=s.shortFlag,this.long=s.longFlag,this.negate=!1,this.long&&(this.negate=this.long.startsWith("--no-")),this.defaultValue=void 0,this.defaultValueDescription=void 0,this.envVar=void 0,this.parseArg=void 0,this.hidden=!1,this.argChoices=void 0}default(t,i){return this.defaultValue=t,this.defaultValueDescription=i,this}env(t){return this.envVar=t,this}argParser(t){return this.parseArg=t,this}makeOptionMandatory(t=!0){return this.mandatory=!!t,this}hideHelp(t=!0){return this.hidden=!!t,this}_concatValue(t,i){return i!==this.defaultValue&&Array.isArray(i)?i.concat(t):[t]}choices(t){return this.argChoices=t,this.parseArg=(i,s)=>{if(!t.includes(i))throw new InvalidArgumentError(`Allowed choices are ${t.join(", ")}.`);return this.variadic?this._concatValue(i,s):i},this}name(){return this.long?this.long.replace(/^--/,""):this.short.replace(/^-/,"")}attributeName(){return camelcase(this.name().replace(/^no-/,""))}is(t){return this.short===t||this.long===t}}function camelcase(t){return t.split("-").reduce(((t,i)=>t+i[0].toUpperCase()+i.slice(1)))}function splitOptionFlags(t){let i,s;const e=t.split(/[ |,]+/);return e.length>1&&!/^[[<]/.test(e[1])&&(i=e.shift()),s=e.shift(),!i&&/^-[^-]$/.test(s)&&(i=s,s=void 0),{shortFlag:i,longFlag:s}}exports.Option=Option,exports.splitOptionFlags=splitOptionFlags;