import path from"path";import mime from"mime-types";import mimeToIO from"./internal/MimeToMeshIO.js";import getFileExtension from"./getFileExtension.js";import extensionToIO from"./extensionToMeshIO.js";import MeshIOIndex from"./internal/MeshIOIndex.js";import loadEmscriptenModule from"./../core/internal/loadEmscriptenModuleNode.js";import runPipelineEmscripten from"../pipeline/internal/runPipelineEmscripten.js";import findLocalMeshIOPath from"./internal/findLocalMeshIOPath.js";import InterfaceTypes from"../core/InterfaceTypes.js";async function readMeshLocalFile(e){const n=findLocalMeshIOPath(),i=path.resolve(e),o=mime.lookup(i),t=getFileExtension(i),r=[i,"0","--memory-io","--quiet"],s=[{type:InterfaceTypes.Mesh}],m=[];let a=null;if(mimeToIO.has(o))a=mimeToIO.get(o);else if(extensionToIO.has(t))a=extensionToIO.get(t);else for(let e=0;e<MeshIOIndex.length;++e){const o=path.join(n,MeshIOIndex[e]+"ReadMesh.js"),t=await loadEmscriptenModule(o),a=t.mountContainingDir(i),{returnValue:l,outputs:p}=runPipelineEmscripten(t,r,s,m);if(t.unmountContainingDir(a),0===l)return p[0].data}if(null===a)throw Error("Could not find IO for: "+i);const l=path.join(n,a+"ReadMesh.js"),p=await loadEmscriptenModule(l),u=p.mountContainingDir(i),{outputs:h}=runPipelineEmscripten(p,r,s,m);return p.unmountContainingDir(u),h[0].data}export default readMeshLocalFile;