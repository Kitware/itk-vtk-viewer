#!/usr/bin/env node
import fs from"fs-extra";import path from"path";import{spawnSync}from"child_process";import{Command,Option}from"commander/esm.mjs";const program=new Command,defaultImageTag="20220619-bedc594a";function processCommonOptions(){const e=program.opts();let r=".";e.sourceDir&&(r=e.sourceDir),fs.existsSync(r)||(console.error("The source directory: "+r+" does not exist!"),process.exit(1)),process.chdir(r);let s="web-build";e.buildDir&&(s=e.buildDir);try{fs.mkdirSync(s)}catch(e){if("EEXIST"!==e.code)throw e}const o=spawnSync("docker",["--version"],{env:process.env,stdio:["ignore","ignore","ignore"]});0!==o.status&&(console.error("Could not run the 'docker' command."),console.error("This tool requires Docker."),console.error(""),console.error("Please find installation instructions at:"),console.error(""),console.error("  https://docs.docker.com/install/"),console.error(""),process.exit(o.status));let t="itkwasm/emscripten:20220619-bedc594a";e.image&&(t=e.image);const i=path.join(s,"itk-wasm-build-env");try{fs.statSync(i)}catch(e){if("ENOENT"!==e.code)throw e;{const e=fs.openSync(i,"w"),r=spawnSync("docker",["run","--rm",t],{env:process.env,stdio:["ignore",e,null]});0!==r.status&&(console.error(r.stderr.toString()),process.exit(r.status)),fs.closeSync(e),fs.chmodSync(i,"755")}}return{dockerImage:t,dockcrossScript:i,buildDir:s}}function build(e){const{buildDir:r,dockcrossScript:s}=processCommonOptions(),o=program.rawArgs.findIndex((e=>"--"===e));let t=[];if(-1!==o&&(t=program.rawArgs.slice(o+1)),"win32"===process.platform){var i=spawnSync('"C:\\Program Files\\Git\\bin\\sh.exe"',["--login","-i","-c",`"${r}/itk-wasm-build-env web-build ${r} `+t+'"'],{env:process.env,stdio:"inherit",shell:!0});0!==i.status&&console.error(i.error),process.exit(i.status)}else{const e=spawnSync("bash",[s,"web-build",r].concat(t),{env:process.env,stdio:"inherit"});0!==e.status&&console.error(e.error),process.exit(e.status)}}function test(e){const{buildDir:r,dockcrossScript:s}=processCommonOptions(),o=program.rawArgs.findIndex((e=>"--"===e));let t=[];if(-1!==o&&(t=program.rawArgs.slice(o+1)),"win32"===process.platform){var i=spawnSync('"C:\\Program Files\\Git\\bin\\sh.exe"',["--login","-i","-c",`"${r}/itk-wasm-build-env ctest --test-dir ${r} `+t+'"'],{env:process.env,stdio:"inherit",shell:!0});0!==i.status&&console.error(i.error),process.exit(i.status)}else{const e=spawnSync("bash",[s,"ctest","--test-dir",r].concat(t),{env:process.env,stdio:"inherit"});0!==e.status&&console.error(e.error),process.exit(e.status)}}function run(e,r){const{buildDir:s,dockcrossScript:o}=processCommonOptions(),t=program.rawArgs.findIndex((e=>"--"===e));let i=[];-1!==t&&(i=program.rawArgs.slice(t+1));const n=`${s}/${e}`;let a="wasmtime";r.runtime&&(a=r.runtime);let c=[];switch(a){case"wasmtime":c=["--args","-e WASMTIME_BACKTRACE_DETAILS=1","/wasi-runtimes/wasmtime/bin/wasmtime-pwd.sh"];break;case"wasmer":c=["sudo","/wasi-runtimes/wasmer/bin/wasmer-pwd.sh"];break;case"wasm3":c=["/wasi-runtimes/wasm3/bin/wasm3"];break;case"wavm":c=["/wasi-runtimes/wavm/bin/wavm","run"];break;default:throw Error("unexpected wasm runtime")}if("win32"===process.platform){var m=spawnSync('"C:\\Program Files\\Git\\bin\\sh.exe"',["--login","-i","-c",`"${s}/itk-wasm-build-env `+c+n+i+'"'],{env:process.env,stdio:"inherit",shell:!0});0!==m.status&&console.error(m.error),process.exit(m.status)}else{const e=spawnSync("bash",[o].concat(c).concat(n).concat(i),{env:process.env,stdio:"inherit"});0!==e.status&&console.error(e.error),process.exit(e.status)}}program.option("-i, --image <image>","build environment Docker image, defaults to itkwasm/emscripten").option("-s, --source-dir <source-directory>",'path to build directory, defaults to "."').option("-b, --build-dir <build-directory>",'build directory whose path is relative to the source directory, defaults to "web-build"'),program.command("build").usage("[-- <cmake arguments>]").description("build the CMake project found in the source directory").action(build),program.command("test").usage("[-- <ctest arguments>]").description("Run the tests for the CMake project found in the build directory").action(test),program.command("run <wasmBinary>").addOption(new Option("-r, --runtime <wasm-runtime>",'wasm runtime to use for execution, defaults to "wasmtime"').choices(["wasmtime","wasmer","wasm3","wavm"])).option("-r, --runtime <wasm-runtime>",'wasm runtime to use for execution, defaults to "wasmtime"').usage("[options] <wasmBinary> [-- <wasm binary arguments>]").description("run the wasm binary, whose path is specified relative to the build directory").action(run),program.parse(process.argv),program.help();