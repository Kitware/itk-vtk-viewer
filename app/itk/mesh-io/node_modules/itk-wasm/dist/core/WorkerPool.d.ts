import WorkerPoolFunction from './WorkerPoolFunction.js';
import WorkerPoolProgressCallback from './WorkerPoolProgressCallback.js';
import WorkerPoolRunTasksResult from './WorkerPoolRunTasksResult.js';
interface RunInfo {
    taskQueue: any[];
    results: any[];
    addingTasks: boolean;
    postponed: boolean;
    runningWorkers: number;
    index: number;
    completedTasks: number;
    progressCallback: WorkerPoolProgressCallback | null;
    canceled: boolean | null;
    resolve?: (results: any) => void;
    reject?: (error: any) => void;
}
declare class WorkerPool {
    fcn: WorkerPoolFunction;
    workerQueue: Array<Worker | null>;
    runInfo: RunInfo[];
    constructor(poolSize: number, fcn: WorkerPoolFunction);
    runTasks(taskArgsArray: any[], progressCallback?: WorkerPoolProgressCallback | null): WorkerPoolRunTasksResult;
    terminateWorkers(): void;
    cancel(runId: number): void;
    private addTask;
    private clearTask;
}
export default WorkerPool;
